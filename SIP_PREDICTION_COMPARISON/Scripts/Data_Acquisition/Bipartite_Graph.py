'''
This code will generate the negative interactions using a bipartite graph.
SIPs will be mapped as positive interactions in the Bipartite Graph (BG).
Other combinations generated by the BG will be considered as negative interactions.
'''

import pandas as pd
import networkx as nx
import itertools

df = pd.read_csv('C:/Users/nextn/Downloads/GitHub/SIP_PREDICTION_COMPARISON/Datasets/Yeast/Yeast_SIPs.csv')
# Filtering out the positive interactions
positive_interactions = df[df['Interaction'] == 1]

# Creating a BG
G = nx.Graph()
G.add_edges_from(positive_interactions[['Identifier A', 'Identifier B']].values)

# Entries from Identifier A and Identifier B will be considered as nodess
all_nodes = set(df['Identifier A']).union(set(df['Identifier B']))

# For all possible combinations, cross product operation were applied
all_edges = set(itertools.combinations(all_nodes, 2))

# From all possible combinations, positive interactions were subtracted
negative_interactions = all_edges - set(G.edges)

'''
Negative Interactions were labelled as 0
A total of five times of the positive interactions were taken as negative samples for training
'''
negative_df = pd.DataFrame(list(negative_interactions), columns=['Identifier A', 'Identifier B'])
negative_df['Interaction'] = 0
sampled_negative_df = negative_df.sample(n=5*len(positive_interactions), random_state=42)

# After concatenation, dataframe combined will be saved as 'Maize_SIPs_All.csv'
all_interactions = pd.concat([positive_interactions, sampled_negative_df])
all_interactions.to_csv('C:/Users/nextn/Downloads/GitHub/SIP_PREDICTION_COMPARISON/Datasets/Yeast/Yeast_SIPs_All.csv', index=False)